buildscript {
	ext {
		kotlinVersion = '1.1.4-3'
		springBootVersion = '1.5.7.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jooq:jooq-codegen:3.10.0")
        classpath("mysql:mysql-connector-java:6.0.6")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'

group = 'com.kylin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}


dependencies {
    compile('org.slf4j:slf4j-api:1.7.21')
    compile('joda-time:joda-time:2.3')

//    compile group: 'org.springframework.data', name: 'spring-data-commons', version: '2.0.2.RELEASE'

    compile('org.springframework.boot:spring-boot-starter-jooq')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-logging')
    compile('net.sourceforge.nekohtml:nekohtml:1.9.22')
    compile('org.jooq:jooq:3.10.0')
    compile('org.jooq:jooq-codegen:3.10.0')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile 'com.xiaoleilu:hutool-all:3.1.1'
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
	// https://mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-core
	compile('com.aliyun:aliyun-java-sdk-core:3.3.1')
    compile('com.aliyun:aliyun-java-sdk-sts:3.0.0')
    compile('com.aliyun.oss:aliyun-sdk-oss:2.8.1')
    compile('com.github.binarywang:weixin-java-mp:2.9.0')
    compile('com.github.binarywang:weixin-java-pay:2.9.0')
    compile('net.glxn:qrgen:1.4')
	compile files('lib/aliyun-java-sdk-dysmsapi-1.0.0.jar')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java:6.0.6')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}


// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
new groovy.xml.MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
    jdbc() {
        driver('com.mysql.jdbc.Driver')
        url('jdbc:mysql://47.92.92.242:3306/activity?serverTimezone=GMT%2b8')
        user('root')
        password('123456')
    }
    generator() {
        database() {
            inputSchema 'activity'
        }
        // Watch out for this caveat when using MarkupBuilder with "reserved names"
        // - https://github.com/jOOQ/jOOQ/issues/4797
        // - http://stackoverflow.com/a/11389034/521799
        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
        generate([:]) {
            springAnnotations true
            pojos true
            daos true
        }
        target() {
            packageName("com.kylin.activity.databases")
            directory("src/main/java")
        }
    }
}

// Run the code generator
// ----------------------
org.jooq.util.GenerationTool.generate(
        javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
)

bootRun {
    jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
}
