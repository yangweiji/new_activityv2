/*
 * This file is generated by jOOQ.
*/
package com.kylin.activity.databases.tables;


import com.kylin.activity.databases.DefaultSchema;
import com.kylin.activity.databases.Indexes;
import com.kylin.activity.databases.Keys;
import com.kylin.activity.databases.tables.records.ArticleRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * 文章 内容发布
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = -1774620436;

    /**
     * The reference instance of <code>article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>article.id</code>. 编号
     */
    public final TableField<ArticleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "编号");

    /**
     * The column <code>article.community_id</code>. 0：表示平台发布， &gt;0 : 团体发布
     */
    public final TableField<ArticleRecord, Integer> COMMUNITY_ID = createField("community_id", org.jooq.impl.SQLDataType.INTEGER, this, "0：表示平台发布， >0 : 团体发布");

    /**
     * The column <code>article.title</code>. 标题
     */
    public final TableField<ArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(225), this, "标题");

    /**
     * The column <code>article.summary</code>. 摘要
     */
    public final TableField<ArticleRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "摘要");

    /**
     * The column <code>article.category</code>. 分类 1：公告通知、2： 赛事新闻、3 运动指南
     */
    public final TableField<ArticleRecord, Integer> CATEGORY = createField("category", org.jooq.impl.SQLDataType.INTEGER, this, "分类 1：公告通知、2： 赛事新闻、3 运动指南");

    /**
     * The column <code>article.body</code>. 正文
     */
    public final TableField<ArticleRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.CLOB, this, "正文");

    /**
     * The column <code>article.status</code>. 状态 0 草稿 1 发布 -1 禁用
     */
    public final TableField<ArticleRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "状态 0 草稿 1 发布 -1 禁用");

    /**
     * The column <code>article.publish_time</code>. 发布时间 显示时按时间倒序排
     */
    public final TableField<ArticleRecord, Timestamp> PUBLISH_TIME = createField("publish_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "发布时间 显示时按时间倒序排");

    /**
     * The column <code>article.avatar</code>. 图片
     */
    public final TableField<ArticleRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(256), this, "图片");

    /**
     * The column <code>article.unit</code>. 发布单位
     */
    public final TableField<ArticleRecord, String> UNIT = createField("unit", org.jooq.impl.SQLDataType.VARCHAR(256), this, "发布单位");

    /**
     * The column <code>article.created</code>. 创建时间
     */
    public final TableField<ArticleRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>article.created_by</code>. 创建人
     */
    public final TableField<ArticleRecord, Integer> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.INTEGER, this, "创建人");

    /**
     * The column <code>article.modified</code>. 修改时间
     */
    public final TableField<ArticleRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP, this, "修改时间");

    /**
     * The column <code>article.modified_by</code>. 修改人
     */
    public final TableField<ArticleRecord, Integer> MODIFIED_BY = createField("modified_by", org.jooq.impl.SQLDataType.INTEGER, this, "修改人");

    /**
     * Create a <code>article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    /**
     * Create an aliased <code>article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "文章 内容发布");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArticleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleRecord>>asList(Keys.KEY_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }
}
